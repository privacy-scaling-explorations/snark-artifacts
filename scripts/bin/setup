#!/bin/bash
set -eou pipefail

download_lib() {
  local url="$1/$3"
  local dest="$2/$3"

  mkdir -p "$(dirname "$dest")"
  curl -sSL "$url" -o "$dest"
}

fetch_and_source_libs() {
  local libs_base_url="$1"
  local libs_dest_dir
  libs_dest_dir=$(mktemp -d)

  shift
  for lib in "$@"; do
    download_lib "$libs_base_url" "$libs_dest_dir" "$lib" &
  done
  wait

  # shellcheck source=/dev/null
  for lib in "$@"; do source "$libs_dest_dir/$lib"; done
}

main() {
  local branch=${1:-main}
  local libs_base_url="https://raw.githubusercontent.com/privacy-scaling-explorations/snark-artifacts/$branch/scripts/lib"
  local libs=("clone.bash" "direction.bash" "find-repo.bash" "print.bash" "prompts.bash" "sparse-checkout.bash" "consts/colors.bash" "consts/remote-url.bash")

  fetch_and_source_libs "$libs_base_url" "${libs[@]}"

  local action
  local repo_dir
  repo_dir=$(find_repo)

  if [[ $repo_dir ]]; then
    print "Repository already cloned at $(brown "$repo_dir")"
  else
    repo_dir=$(clone_repository)
    cd "$repo_dir"
    maybe_init_sparse_checkout "$repo_dir"
  fi

  cd "$repo_dir"
  action=$(read_action)
  edit_sparse_checkout "$action" "$(read_package action)"
}

exec 3>/dev/tty
main "$1"
exec 3>&-
