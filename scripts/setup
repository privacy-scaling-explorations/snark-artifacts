#!/bin/bash

set -eou pipefail

BROWN=$'\e[0;33m'
RED=$'\e[0;31m'
RESET=$'\e[0m'

print() { printf "%s\n" "$1"; }

print_color() {
  local color="$1"
  local message="$2"
  printf "%s%s%s\n" "$color" "$message" "$RESET"
}

print_brown() { print_color "$BROWN" "$1"; }
print_red() { print_color "$RED" "$1"; }

read_input() {
  local message="$1"
  local input_name="$2"
  local input=""

  while [[ -z "$input" ]]; do
    print "$message"
    read -r input
    [[ -z "$input" ]] && print_red "$input_name cannot be empty. Please enter a valid $input_name."
  done

  echo "$input"
}

clone_repository() {
  local repo_url
  local clone_dir

  repo_url=$(read_input "Enter the URL of the repository to clone:" "URL")
  clone_dir=$(read_input "Enter the directory to clone into:" "directory")

  print "Cloning repository..."
  git clone --filter=blob:none "$repo_url" "$clone_dir" --sparse

  printf "%s%s\n" "Repository cloned to " "$(print_brown "$clone_dir")"

  echo "$clone_dir"
}

maybe_init_sparse_checkout() {
  local repo_dir="$1"

  if ! git config --local --get core.sparseCheckout; then
    git sparse-checkout init --cone
    git sparse-checkout add scripts
  fi
}

add_package_to_sparse_checkout() {
  local repo_dir="$1"
  local choice=""

  cd "$repo_dir"
  maybe_init_sparse_checkout "$repo_dir"

  while [[ ! $choice =~ ^(eddsa|e|poseidon|p|semaphore|p)$ ]]; do
    printf "%s\n" "Which package would you like to sparse-checkout? (${BROWN}e$RESET)ddsa/(${BROWN}p$RESET)oseidon/(${BROWN}s$RESET)emaphore:"
    read -r choice
    case "$choice" in
    "e") choice="eddsa" ;;
    "p") choice="poseidon" ;;
    "s") choice="semaphore" ;;
    *) printf "%s\n%s\n" "${RED}Invalid input.$RESET" "Please enter ${BROWN}e$RESET (eddsa), ${BROWN}p$RESET (poseidon) or ${BROWN}s$RESET (semaphore)." ;;
    esac
  done

  git sparse-checkout add "packages/$choice"

  printf "%s%s\n" "Set up sparse checkout for packages/" "$(print_brown "$choice")"
}

find_repo_dir() {
  local remote_url="git@github.com:privacy-scaling-explorations/snark-artifacts.git"
  local repo_dir

  repo_dir=$(find "$HOME" -type f -name "config" -exec grep -q "$remote_url" {} \; -print -quit 2>/dev/null)
  [[ $repo_dir ]] && echo "$(dirname "$(dirname "$repo_dir")")"
}

main() {
  local repo_dir
  repo_dir=$(find_repo_dir)

  if [[ $repo_dir ]]; then
    printf "%s%s\n" "Repository already cloned at " "$(print_brown "$repo_dir")"
  else
    exec 3>/dev/tty
    repo_dir=$(clone_repository)
    exec 3>&-

    init_sparse_checkout "$repo_dir"
  fi

  add_package_to_sparse_checkout "$repo_dir"
}

main
